# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Makes a public distribution."
  lane :distribute do
    public_release_sdk("ScanditScanPlugin")
  end

  def public_release_sdk(sdk)
    framework = get_sdk_target(sdk)
    
    cocoapods_archive = archive_framework_for_cocoapods(framework)
    cathage_archive = archive_framework_for_carthage(framework)

    version = get_version_number(
      target: framework)

    name = "Release " + version
    repo = repo_for_framework(framework)

    upload_to_github(
      version, 
      name,
      "No changelog provided", 
      repo,
      [cocoapods_archive, cathage_archive]
    )

    message = "Update latest" + framework + " SDK build"
    commit_and_push(message)
  end

  def repo_for_framework(framework)
    return "sonect/sonect-scandit-scan-plugin"
  end  

  def get_sdk_target(sdk) 
    return "ScanditScanPlugin"
  end

  def commitAndPush(message) 
    git_add
    git_commit(path: "*", message: message)
    push_to_git_remote(
      local_branch: "master",
      remote_branch: "master")
  end

  def archive_framework_for_cocoapods(framework) 
    output_zip = framework + "Cocoapods.framework.zip"

    framework_path = build_xcframework(framework)
    archive(framework_path, output_zip)

    return output_zip
  end  

  def archive_framework_for_carthage(framework)
    carthage_build()

    output_zip = framework + ".framework.zip"

    carthage(
      command: "archive",
      frameworks: [framework],
      output: output_zip)

    return output_zip  
  end

  def build_xcframework(framework) 
    output_dir = 'Build/XCFrameworks'

    create_xcframework(
      workspace: framework + '.xcworkspace',
      scheme: framework,
      destinations: ['iOS'],
      xcframework_output_directory: output_dir,
      include_dSYMs: true, 
      include_BCSymbolMaps: true
    )

    return output_dir + "/" + framework + ".xcframework"
  end  

  def carthage_build() 
    carthage(
      command: "build",
      platform: "iOS",
      no_skip_current: true)
  end

  def archive(src, dst)
    src = "../" + src
    dst = "../" + dst
    sh("ditto", "-c", "-k", "--sequesterRsrc", "--keepParent", src, dst)
  end

  def upload_to_github(tag_name, name, description, repository_name, assets)
    token = File.read("github.token")

    set_github_release(
      tag_name: tag_name,
      name: name,
      description: description,
      repository_name: repository_name,
      api_token: token,
      upload_assets: assets)

    pod_trunk_push()

    delete_files(assets)
  end

  def pod_trunk_push()
    command = "cd .. && pod trunk push"
    sh(command)
  end

  def delete_files(files) 
    command = "cd .. && rm " + files.join(' ')
    sh(command)
  end 

end
